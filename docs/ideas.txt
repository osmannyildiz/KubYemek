misc:
- check secrets leak in bundle

docs:
- projede iÃ§ime sinmeyenler

feat:
- admin frontend: product price decimal input
- pagination
- input validation (params/query/body, form)
- show unseen notification count
- visually differentiate unseen notifications
- parameterized error messages
- frontend error alert (like swal)
- multiple product images (GET/POST /products/:id/images, GET/PATCH/DELETE /products/:id/images/:id)
- multiple customer addresses
- services & apis: single filter endpoint (via query string)
- multi-restaurant
- link products from admin-frontend to customer-frontend
- db/orders.notes
- change customer delete (db/customers.is_deleted)
- update order (if before inDelivery)
- allow cancel order only if before inPreparation (customer only)
- send notification to customer ("we gifted you 500 points" etc.)
- dbpkg: transaction (order-service/controllers/orders)
- customers: don't allow points to go negative
- customers: register age restriction
- caching (redis)
- page html titles
- admin svc & customer svc & auth api: GET /me
- dbpkg: get many by ids array

fix:
- react query proper handling (loading, error, etc.)
- export const router = express.Router(); ts error
- use axios or fix node-fetch@3 (also nanoid)
- updates: ignore if absent/undefined, update if present, clear if null, rollback if invalid
- handle clear/update image (delete from s3, imagepicker clear button, imagepicker reset button)
- express global error handler
- frontend: handle token expiry
- admin-frontend: handle empty table/list (data == [])
- ts: inside api controllers's get methods, serviceClient's returned data doesn't have type

refactor:
- prefix reqbody and resbody names with service/api name
- export * from bucket files
- model all config files
- services: dont call repo if basic validation fails
- construct formdata for type (for req bodies)
- use next/image
- dbpkg: automate insert (also using snakeToCamel)
- better way to send query strings with fetch
- multer + multer-s3 -> multer + s3-client -> from frontend
- jwt -> passport
- task queues (order service)
- use next/auth
- store token expiry time in config
- use zustand instead of context
- clients singleton
- use prisma instead of dbpkg
- refactor all fetch calls
- services & apis: make controllers shorter (by aop, middlewares, etc.)
- OrderDto => OrderDtoBuilder, IOrderDto => OrderDto
- rename OrderDto (the naming is not descriptive and sustainable)
- dbpkg: getAll => getMany
- order-service/controllers/orders error handling (exclamation marks)
- if (!resp.ok) don't call resp.json

learn:
- package.json version identifier syntax
- ts try/catch typing (differentiate NetworkError from *RespBodyIsNotOkError)
- services: mysql too many connections error

consider:
- should we check validations in api as well?
- db entities (separate from priv entities)
- hide db id from frontend (incl. jwt)
- html image input required attr
- show a flash message if we had to increment slug
- convert core deps to devDeps
- admin frontend: make navitems' active status consistent
- frontend: make MutationButton component (button with spinner)
- use Date objects instead of strings && dbpkg: add Date to Value
- (my)sql enum
- dbpkg: improve where clause query building logic
- ts: use Pick<> and Omit<> (for request bodies etc.)
- add tests
- OrderStatus.fulfilled => .delivered
- delete notification
- create jwt tokens for services
- orders and order_products and products join
- authAllowOnlyIfCustomerSelf middleware
- { count, next, prev, results }
- dbpkg: db.createAdminNotificationsRepo()
